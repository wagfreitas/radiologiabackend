{"version":3,"sources":["./src/app/_services/cirurgias.service.ts","./src/app/_services/dados.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\nimport 'firebase/firestore';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CirurgiasService {\n  regCol: AngularFirestoreCollection<any>;\n  exaCol: AngularFirestoreCollection<any>;\n  itemDoc: AngularFirestoreDocument<any>;\n\n\n  constructor(private afs: AngularFirestore) {\n    this.regCol = this.afs.collection<any>('registros');\n    this.exaCol = this.afs.collection<any>('exames');\n   }\n\n  insert(cirurgia: any) {\n    this.regCol.add(JSON.parse(JSON.stringify(cirurgia))).then(res => {\n      console.log('resultado recebido', res)\n    //  this.showToast('Registros Incluidos com Sucesso')\n    });\n  }\n\n  update(cirurgia: any, key: string) {\n    this.regCol.doc('key').set(cirurgia).then(res => {\n      console.log('update feito', res )\n    }).catch((error: any) => {\n        console.error(error);\n      });\n  }\n\n  getAll() {\n    return this.afs.collection('registros')\n      .snapshotChanges()\n      .pipe(\n        map(changes => {\n          return changes.map(doc => {\n            const data = doc.payload.doc.data();\n            return { data}});\n        })\n      );\n  }\n\n  createMascara(doc, record) {\n    console.log(record)\n    console.log(Object.assign({}, record));\n    return this.afs.collection('mascaras').doc(doc).set(JSON.parse(JSON.stringify(Object.assign({}, record))));\n  }\n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\nimport { AngularFireDatabase, AngularFireList, AngularFireObject } from '@angular/fire/database';  // Firebase modules for Database, Data list and Single object\n\nimport 'firebase/firestore';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport cadExames from '../shared/exames.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DadosService {\n  private dbPath = '/exames';\n\n  examesRef: AngularFirestoreCollection<cadExames>;\n  //examesRef: AngularFireList<any>;    // Reference to exame data list, its an Observable\n  exameRef: AngularFireObject<any>;\n\n  regCol: AngularFirestoreCollection<any>;\n  itemDoc: AngularFirestoreDocument<any>;\n  invoiceCol: AngularFirestoreCollection<any>;\n  items: Observable<any[]>;\n\n  constructor(private afs: AngularFirestore,\n    private db: AngularFireDatabase) {\n\n      this.examesRef = afs.collection(this.dbPath);\n\n  }\n\n  getAll(): Observable<any>  {\n\n  this.regCol = this.afs.collection<any>('exames');\n    this.items = this.regCol.snapshotChanges().pipe(\n        map(actions => {\n        return actions.map(a => {\n            const data = a.payload.doc.data();\n            const id = a.payload.doc.id;\n            return { id, ...data };\n        });\n        })\n    );\n  return this.items;\n }\n\n gravarExames(exame: any) {\n  console.log(Object.assign({}, exame));\n  this.regCol.add(JSON.parse(JSON.stringify(exame))).then(res => {\n    console.log('resultado recebido', res)\n    return res\n  //  this.showToast('Registros Incluidos com Sucesso')\n  });\n}\n\ncreate(exames: cadExames): any {\n  return this.examesRef.add({ ...exames });\n}\n\n// Fetch Single exame Object\nGetExame(id: string) {\n  this.exameRef = this.db.object('exames/' + id);\n  return this.exameRef;\n}\n\nupdateExame(id: string) {\n this.afs.collection(this.dbPath).doc(id).set({\n   status: \"Baixado\"\n }, { merge: true });\n}\n\n\n// Fetch exames List\n\n\n\n\n\n}\n"],"sourceRoot":"webpack:///"}